# composer.py by Konov Denis,
# telegram: @stdio, mail: konov1999@gmail.com
# 
# Setups a swift environment
# version 0.5

file_names = {
    "ini": "earthquake.ini",
    "polygon": "polygon_%d.txt",
    "crack": "polygon_%d_cracks.txt",
    "contacts": "contacts.txt",
}

ini_def_vars = {
    "courant": "1.0",
    "fixed nodes": "1",
    "real precision": "float",
    "alpha": "1.1",
    "plot file": "p-wave.plot",
    "plot snaps": "0.1",
    "plot exact snaps time": "1",
    "detailed plot": "0",
    "plot reserve factor": "1.1",
    "receivers snaps": "0.001",
    "max time": "1.0",
    "receivers plot path": "receivers.csv",
}

ini_def_inistate = {
    "inistate": "ball",
    "inistate smooth": "0",
    "inistate smooth factor": "0.5",
    "inistate pressure": "10000000",
    "inistate velocity": "0 0",
    "inistate er": "25",
    "inistate radial velocity": "100",
    "inistate ecentre": "0 -1",
}


class Ini:
    receivers = []
    vars = {}

    def write(self, path: str, elastic_characteristics_list: []):
        f = open(path + "\\" + file_names["ini"], "w")
        f.write("//Automatically generated by composer.py\n\n")
        for key in self.vars:
            f.write("%s = %s\n" % (key, self.vars[key]))

        f.write("\n//Materials:\n")
        num = int(0)
        f.write("polygons count = %d\n" % len(elastic_characteristics_list))
        for x in elastic_characteristics_list:
            f.write("polygon[%d].material density = %f\n" \
                    "polygon[%d].material sound speeds = %f %f\n" \
                    % (num, x[0], num, x[1], x[2]))
            num += 1

        f.write("\n//Receivers:\n")
        num = int(0)
        f.write("receivers count = %d\n" % (len(self.receivers)))
        for x in self.receivers:
            f.write("receiver[%d].name = %d\n"
                    "receiver[%d].point = %f %f\n" % ((num, num, num) + (x)))
            num += 1
        f.close()


class Contacts:
    def write(self, path: str):
        f = open(path + "\\" + file_names["contacts"], "w")
        f.close()


class Body:
    relative_vector = (0, 0)
    vertices = []
    features = []
    num_features = {
        "Caverns": 0,
        "Empty": 0,
        "Fluid": 0,
        "Glued": 0,
        "PartlyGlued": 0,
    }

    def __init__(self, density, velocity, velocity_transverse):
        self.elastic_characteristics = (density, velocity, velocity_transverse)

    def write(self, path: str, num: int):
        f = open(path + "\\" + file_names["polygon"] % num, "w")
        f.write("%d %d %d %d %d\n" % tuple(self.num_features[i] for i in self.num_features))
        f.write("%d\n" % len(self.vertices))
        f.write("%f %f\n" % self.relative_vector)
        for x in self.vertices:
            f.write("%f %f\n" % x)
        f.close()
        f = open(path + "\\" + file_names["crack"] % num, "w")
        for x in self.features:
            f.write("%f %f %f %f\n" % x)
        f.close()

    def add_geometry(self, vertices: ()):
        self.vertices += vertices

    def move_relatively(self, x, y):
        self.relative_vector = (x, y)

    def add_feature(self, feature_coordinates: (), feature_type: str, angle, length):
        num = len(self.features)
        self.features += (i + (angle, length) for i in feature_coordinates)
        self.num_features[feature_type] += len(self.features) - num

    def clear_features(self):
        for x in self.num_features:
            self.num_features[x] = 0
        self.features = []


class Environment:
    ini = Ini()
    bodies = []
    contacts = Contacts()

    def write(self, path: str):
        elastic_characteristics_list = []
        for x in self.bodies:
            elastic_characteristics_list.append(x.elastic_characteristics)
        self.ini.write(path, elastic_characteristics_list)
        num = int(0)
        for x in self.bodies:
            x.write(path, num)
            num += 1
        self.contacts.write(path)

    def __init__(self, vars=ini_def_vars, inistate=ini_def_inistate):
        self.ini.vars = {**vars, **inistate}

    def get_var(self, key: str):
        return self.ini.vars[key]

    def set_var(self, key: str, value: str):
        self.ini.vars[key] = value

    def add_body(self, body: Body):
        self.bodies.append(body)

    def clear_bodies(self):
        self.bodies = []

    def add_receivers(self, receivers: ()):
        self.ini.receivers += receivers


def line(x1, x2, step, z):
    ret = []
    while x1 <= x2:
        ret.append((x1, z))
        x1 += step
    return ret


def rect(dx, dz, x0=None, z0=None):
    if x0 is None:
        x0 = -(dx / 2)
    if z0 is None:
        z0 = 0
    return ((x0, z0), (x0, z0 + dz), (x0 + dx, z0 + dz), (x0 + dx, z0))

